name: IP Logger

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

jobs:
  update-ip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install gspread google-auth requests

      - name: Create credentials file (safe write)
        run: |
          printf '%s' "${{ secrets.GOOGLE_CREDENTIALS }}" > credentials.json
          ls -la credentials.json

      - name: Diagnostic: show file head and hex
        shell: bash
        run: |
          echo "---- credentials.json head (first 20 lines) ----"
          sed -n '1,20p' credentials.json || true
          echo
          echo "---- credentials.json hexdump (first 256 bytes) ----"
          head -c 256 credentials.json | od -An -tx1 -v | sed -E 's/^[[:space:]]+//'
          echo
          echo "---- credentials.json length and last 64 bytes ----"
          wc -c credentials.json
          tail -c 64 credentials.json | od -An -tx1 -v | sed -E 's/^[[:space:]]+//' || true

      - name: Diagnostic: python JSON parse with detailed exception
        run: |
          python - <<'PY'
          import json,sys
          fname = 'credentials.json'
          b = open(fname,'rb').read()
          try:
              s = b.decode('utf-8')
          except:
              s = b.decode('utf-8', errors='replace')
          print("==== repr of first 400 chars ====")
          print(repr(s[:400]))
          print("==== end repr ====")
          print("total length:", len(s))
          try:
              json.loads(s)
              print("PARSE_OK")
              sys.exit(0)
          except Exception as e:
              print("PARSE_EXCEPTION_TYPE:", type(e).__name__)
              print("PARSE_EXCEPTION:", e)
              try:
                  from json.decoder import JSONDecodeError
                  if isinstance(e, JSONDecodeError):
                      idx = e.pos
                      print("error pos (e.pos):", idx)
                      start = max(0, idx-40)
                      end = min(len(s), idx+40)
                      print("context (start..end):")
                      print(repr(s[start:end]))
              except Exception:
                  pass
              sys.exit(2)
          PY

      - name: Run IP update script
        if: success()
        run: python update_ip.py
